 <section class="stack" id="stack">
            <h2>Today's Stack</h2>
            <div class="horiz-scroll">

                  {{#each fullHabits as |habit|}}
            
            <div class="card">
                <div class="habit_title_text">
                    <h3 class="habit_title">{{habit.name}}</h3>
                    <h5 class="habit_title">Max-Streak: {{habit.topStreak}} | Current Streak: {{habit.currentStreak}}</h5>
                
                </div>
                
                <div class="wrapper">
                    <div class="row sml-row">
                        {{#each hathReturned as |day |}}
                        <div class='slot smaller {{day.found}} {{day.message}}'
                        >
                        {{#if day.isTopStreak}} <p class="streakEmoji">üî•</p>{{/if}}
                        </div>
                        {{/each}}
                    </div>
                </div>
                <p class="habit_descrip">{{habit.description}}</p>
                
                <div class="actions" data-habitId="{{habit.id}}">
                    <button class="no">x</button>
                    <button class="skip">skip</button>
                    <button class="yes">y</button>
                </div>


                    
            </div>

            <div class="card">
                <div class="habit_title_text">
        
                    <h3 class="habit_title quotes">Keep it up</h3>
                
                </div>
                
          
          
           
                
                <div class="actions" data-habitId="">
    
                    <button class="skip">Next</button>
       
                </div>


                    
            </div>

            {{/each}}




            


            {{!-- {{#each habitData as | habit |}}
                <div class="card">
                    <h3>{{habit.name}}</h3>
                    <div class="row  sml-row">
                        <div class="slot smaller"></div>
                        <div class="slot smaller"></div>
                        <div class="slot smaller"></div>
                        <div class="slot smaller"></div>
                        <div class="slot smaller"></div>
                        <div class="slot smaller"></div>
                        <div class="slot smaller"></div>
                    </div>
                    <div class="habit-info">
                        <p>{{habit.description}}</p>
                        <br>
                        <p>Goal: 5 days/week</p>
                        <p>This week: 1/2</p>
                        <p>Current streak: 10 days</p>
                        <p>Tags: <a href="">#health</a> <a href="">#discipline</a> <a href="">#family</a>  </p>
                    </div>
                    <div class="actions" data-habitId="{{habit.id}}">
                        <button class="no">x</button>
                        <button class="skip">skip</button>
                        <button class="yes">y</button>
                    </div>
                        
                </div>
           {{/each}} --}}

                <div class="card nicejob">
                    <h3 id="greatJob"></h3>
                    <br>
                    <p>High five! üôè That's it for now. Go scroll TikTok or something.</p>
                    <p></p>
                    <button id="prof">Your Profile</button>

                        
                </div>
    
            </div>
        </section>


        <script>
            const yeah = document.getElementsByClassName("yes");
            const nope = document.getElementsByClassName("no");
            const skippy = document.getElementsByClassName("skip")

            const createEntryHandler = async id => {
                const nowy = new Date()
                console.log(new Date(nowy))
                const dateToPass = `${nowy.getFullYear()}-${nowy.getMonth() +1}-${nowy.getDate()}`
                console.log(dateToPass)
                const idToPass = Number(id)
                
                response = await fetch('/api/entries/', {
                method: 'POST',
                body: JSON.stringify({date: dateToPass, completed: true, habit_id: idToPass }),
                headers: {'Content-Type': 'application/json'},
            });
                if (response.ok){
                    console.log('Nice job! Now get out of my console')
                } else {
                    console.log('Uh oh there was an error with the entry handler')
                }
            }

            for (let i = 0; i < yeah.length; i++){
                yeah[i].addEventListener('click', (e) => {
                    let logid = e.target.parentElement.dataset.habitid
                    createEntryHandler(logid)

                    e.target.parentElement.parentElement.setAttribute("style", "transform: translate(100vw);")
                    e.target.innerHTML=happyFunc()
                    setTimeout(() => {e.target.parentElement.parentElement.remove()}, 500)
                });
            }
            for (let i = 0; i < nope.length; i++){
                nope[i].addEventListener('click', (e) => {
                    e.target.parentElement.parentElement.setAttribute("style", "transform: translate(-100vw);")
                    e.target.innerHTML=sadFunc()
                    setTimeout(() => {e.target.parentElement.parentElement.remove()}, 500)
                });
            }

            for (let i = 0; i < skippy.length; i++){
                skippy[i].addEventListener('click', (e) => {
                    e.target.parentElement.parentElement.setAttribute("style", "transform: translate(-100vw);")
                    e.target.innerHTML=`ü§î`
                    setTimeout(() => {e.target.parentElement.parentElement.remove()}, 500)
                });
            }

            const greatJobFunc = () => {
                const messages = ['Nice work', 'You crushed it!', "Look at you go", "Oh heck yeah", "Big up"]
                return messages[Math.floor(Math.random() * messages.length)]
            }
            const happyFunc = () => {
                const choices = ["‚ù§Ô∏è", "üî•", "ü§©", "üéâ", "üí™", "üçæ", "üöÄ"]
                return choices[Math.floor(Math.random() * choices.length)]
            }
            const sadFunc = () => {
                const choices = ["ü§¨", "üò£", "ü§Æ", "üö©", "üíÄ", "üò®"]
                return choices[Math.floor(Math.random() * choices.length)]
            }


            const greatJob = document.getElementById('greatJob');
            greatJob.innerHTML=`${greatJobFunc()}!`

            const goHome = document.getElementById('prof').addEventListener('click', () => {
                const userId = window.location.pathname.split('/')[2]
                document.location.replace(`/users/${userId}`)
            })


            const quotes = document.getElementsByClassName('quotes')

            let quotesArray = [
                '"The secret of getting ahead is getting started." ‚Äî Mark Twain',
                '"Hold the vision, trust the process." ‚Äî Unknown ',
                '"Impossible is just an opinion." ‚Äî Paulo Coelho',
                '"The way I see it, if you want the rainbow, you gotta put up with the rain." ‚Äî Dolly Parton',
                '"Get busy living or get busy dying." ‚Äî Stephen King',
                '"Keep your face always toward the sunshine, and shadows will fall behind you." ‚Äî Walt Whitman',
                '"Success is not final, failure is not fatal: it is the courage to continue that counts." ‚Äî Winston Churchill',
                '‚ÄúEverything you can imagine is real.‚Äù‚ÄïPablo Picasso',
                '‚ÄúIt‚Äôs no use going back to yesterday, because I was a different person then.‚Äù ‚ÄïLewis Carroll'
            ];
        
            for (let i = 0; i < quotes.length; i++){
                quotes[i].innerHTML=quotesArray[i]


            }

        </script>