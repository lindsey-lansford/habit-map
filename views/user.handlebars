       <section class="hero-2" id="stacks">
            <div class="bg"></div>
            <article class="hero-text">
                <h2 class="user_text">{{user.first_name}}'s Stack</h2>
                <div class="btngrp">
                    <button id="new_habit" class="hbt">New habit</button>
                    <button id="stacker" class="hbt">Stack em!</button>
                </div>
            </article>
            <hr>

  

            {{#each fullHabits as |habit|}}
            
            <div class="habit_title_text">
                <h3 class="habit_title">{{habit.name}}</h3>
                <h5 class="habit_title">Max-Streak: {{habit.topStreak}} | Current Streak: {{habit.currentStreak}}</h5>
                

            </div>
            <div class="wrapper">
                <div class="row">
                    {{#each hathReturned as |day |}}
                    <div class='slot {{day.found}} {{day.message}}'
                    >
                    {{#if day.isTopStreak}} <p class="streakEmoji">ðŸ”¥</p>{{/if}}
                    </div>
                    {{/each}}
                </div>
            </div>

            <p class="habit_descrip">{{habit.description}}</p>
            <button class="delete_habit" data-delid="{{habit.id}}">delete</button>
        

            <br>
    <hr>

            {{/each}}


      
            <article class="hero-text">
                <h2>Your Reports</h2>
                {{!-- <p>Habits completed/day</p> --}}
                   <div class="chart-wrapper" id="chart-wrapper" ></div>
            
            </article>

        </section> 

        <script>


const new_habit = document.getElementById('new_habit')
const userNum = window.location.pathname.split('/')[2]

new_habit.addEventListener('click', () => {
    location.assign(`/users/${userNum}/new`)
})
const stacker = document.getElementById('stacker')

stacker.addEventListener('click', () => {
    location.assign(`/users/${userNum}/stack`)
})

const deletes = document.getElementsByClassName('delete_habit')

console.log(deletes)

for (let i = 0; i < deletes.length; i++){
    deletes[i].addEventListener('click', (e) => deleteHandler(e.target.dataset.delid))
}

const deleteHandler = async (id) => {     
            const response = await fetch(`/api/habits/${id}`, {
                method: 'DELETE',
                body: JSON.stringify({habit_id: id }),
                headers: {'Content-Type': 'application/json'},
            });


            if (response.ok){
                    console.log('Nice job! Now get out of my console')
            } else {
                    console.log('Uh oh there was an error with the entry handler')
            }

            document.location.replace(`/users/${userNum}`)
}

 const getChart = async e => {


    
            response = await fetch(`/api/users/${userNum}`, {
                method: 'GET',
                headers: {'Content-Type': 'application/json'},
            });

            if (response.ok){
     
                const responseData = await response.json()

                console.log(responseData)
      
                drawChart(responseData)
            } else {
                const errorSlot = document.getElementById('error')
                errorSlot.textContent = 'Something went wrong :('
            }
        
    } 

    {{!-- const cgetChart = document.getElementById('getChart')
    .addEventListener('click', registerFormHandler) --}}

          

     const drawChart = (input) => {
        let entries = []
        input.habits.forEach(habit => habit.entries.forEach(entry => entries.push(entry)))

        if (entries.length == 0)
        {
            console.log('right here baby')
        let draw = document.getElementById('chart-wrapper')
       let chartImg =  document.createElement("p")
        chartImg.innerHTML=('Not enough data yet. Come back later')
       draw.appendChild(chartImg)
       return;

        }


        const today = new Date;
        let lowest = today
        let highest = today


        entries.forEach(obj => new Date(obj.date) > highest ? highest = obj.date : '')
        entries.forEach(obj => new Date(obj.date) < lowest ? lowest = obj.date : '')

 

        let returner = []

        const first = new Date(lowest)
        let loop = new Date(first)
        while (loop <= highest) {
            let ayo = loop.toDateString()

            returner.push({
                date: ayo,
                count: 0
            })

            let newDate = loop.setDate(loop.getDate() + 1)
            loop = new Date(newDate)
        }

  

    {{!-- console.log(entries) --}}

        const countAtDate = date => {
            const d = new Date(date)
            let counter = 0
            for (let i = 0; i < entries.length; i++){
                let p = new Date(entries[i].date)
                let pt = p.toDateString()
                let q = d.toDateString()
                console.log({q, pt})
                if(pt == q){
                    counter++
                }

            } return counter
        }

          returner.forEach(date => console.log(date.date) )
          returner.forEach(date => date.count = countAtDate(date.date) )
          console.log(returner)
          returner.forEach(date => date.date = new Date(date.date).toLocaleDateString())
        console.log(returner)
        let data1 = ''
        returner.forEach(date => {
            const a = new Date (date.date)
            const b = a.getDate()
            date.a = b
        })
        returner.forEach(date => data1 += `${date.a},`)
        console.log(data1)

        let data2 = 'data1='
        returner.forEach(date => data2 += `${date.count},` )

        //?data1=50,40,30,20


        //https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015,2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}

       let draw = document.getElementById('chart-wrapper')
       let chartImg =  document.createElement("IMG")
        chartImg.src = `https://quickchart.io/chart/render/zm-b6dc63b0-b741-4e8c-ad55-ddb18d090286
?${data1}&${data2}&labels=${data1}`
       draw.appendChild(chartImg)



    }

    getChart()

</script>

<style>
    .chart-wrapper{
        max-width: 95vw;
        background-color: white;
        display: flex;
        justify-content: center;
        padding: 1rem;
    }

    .chart-wrapper img{
        max-width: 100%;
    }
</style>